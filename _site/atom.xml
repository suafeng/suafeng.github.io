<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>DaiTao's Page</title>
 <link href="suafeng/atom.xml" rel="self"/>
 <link href="suafeng"/>
 <updated>2015-09-06T13:36:20+08:00</updated>
 <id>suafeng</id>
 <author>
   <name>Dai Tao</name>
   <email>suafeng@gmail.com</email>
 </author>

 
 <entry>
   <title>最近读的一些杂书</title>
   <link href="suafeng/2015/08/09/reading-notes.html"/>
   <updated>2015-08-09T00:00:00+08:00</updated>
   <id>suafeng/2015/08/09/reading-notes</id>
   <content type="html">
&lt;p&gt;最近看了几本书，大多都是觉得有些意思就从亚马逊上买了。自从我的Kindle坏了之后，我就基本只买纸质书了。虽然纸质书携带不够方便，看起来更够味。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;别逗了，费曼先生! (5*)&lt;/h3&gt;
&lt;p&gt;这是我最推荐的一本，断断续续看了两遍。这本书虽然是翻译的，但是质量很够水准，费曼聪明的坏教授形象跃然纸上。费曼作为物理学家也挺逗的，从小喜欢发明各种东西、恶作剧，折腾电子器件，好玩。青年时期开始折腾物理，在暑假期间顺便当了一段时间『化学家』。后面又对破解密码锁、画画、打鼓、学习外语产生浓厚兴趣，并极其投入。贯穿其中最让人敬佩的是费曼的好奇心好韧性。整本书都是在用一种诙谐平叙事写法，不过突然怀念自己的妻子那段特别感人，他的妻子去世那段时间正是在研发原子弹期间：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;当我返回的时候他们都来问我发生了什么事儿，&lt;/p&gt;

  &lt;p&gt;“她死了，工作进行的怎么样？”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;他们立刻明白了，我不想为此终日哀伤。我显然要做些安慰心理的事：现实是重要的。我一定要理解，从生理学上说，阿琳究竟是怎么了；&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;我没哭，直到几个月之后。当时我在橡树岭，我正走过一家百货商店的橱窗，里头挂着女士服装，我想阿琳或许喜欢其中一件。此时此刻，我不盛悲戚。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;他谢绝芝加哥大学高薪聘请的那段挺逗：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“我将有能力做我一直想做的事 ——- 找个迷人的情妇，为她买一座漂亮的房子，给她买好东西……用你们给的这份薪水，我必定真的会这么做，我知道那会是什么结果，我会为她操心，挂念她在干什么，我们会吵架。我回家的时候，又会如何如何。这些闹心的事儿，会让我寝食不安，会让我心情不快。我搞物理也搞不好了，一切都将是一团糟！……因此，我已经决定，我不能接受你们的好意。”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;费曼的理念是一个东西都可以用更通俗的说法来解释，但必须是建立的自己理解的基础上。&lt;/p&gt;

&lt;p&gt;在巴西的教学过程中，费曼对填鸭式教学进行了思考和批判，里面所描述的场景和国内的教学何其相似！学生只是背诵，根本不理解那些科学概念背后的生动的东西。&lt;/p&gt;

&lt;p&gt;最后，我认为判断人是否老了的一个标准就是其是否还对新鲜东西保持好奇心，有好奇心的人竟然这么好玩！&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;鱼羊野史 (4*)&lt;/h3&gt;

&lt;p&gt;一直比较喜欢高晓松，他的一些老歌都挺好听的。在深圳的时候听过一次他的演唱会，观众大多都是一些30岁以上的中年人。高晓松家庭显赫，一直都随性游荡，涉猎广泛，吹起牛来根本停不下来。有一段时间我也会在上班路上听他的小松奇谈，东南西北特别能侃。小松奇谈里面我最喜欢的故事是其二叔的爱情故事《文革时期的何以笙箫默》，是真是假无从考证，不过这还真是个能拍成电影的好故事。偶然在网上看到高晓松的这三本书，空闲时间把这些都看完了。总得来说不如听小松奇谈来劲，而且很多篇都是比较八卦，比如李宇春、齐秦生日之类的。这些还活着的明星们八卦怎么说也不能算作历史吧，即使是野史。另外就是三本的内容竟然有不少是重合的！&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;李光耀观天下 (4*)&lt;/h3&gt;

&lt;p&gt;中国的改革开放从新加坡借鉴了，中国相关的篇章还挺直接的。对邓小平和老毛的描述比较多，其他人就呵呵了。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;成大事者不纠结 (3*）&lt;/h3&gt;

&lt;p&gt;逻辑思维的公众号更新很勤快，内容也不错。不过这本书倒是没什么太多内容，李鸿章和曾国藩的章节都是在逻辑思维里面讲过的。更让我不爽的是书的封装，居然带了一打微信推广号。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;从0到1 (3*)&lt;/h3&gt;
&lt;p&gt;这本书挺有名的，不过看完后并没产生多少共鸣。可能是因为我现在对创业这个词有些抵触，创业现在动不动就是改变人类、情怀。这个词被玩坏了。在互联网这个行业，创业看起来有点类似大跃进。大家都吹牛，比如前段时间被扒皮的&lt;a href=&quot;http://www.zhihu.com/question/27297651&quot;&gt;云视链&lt;/a&gt;就属于吹牛吹破了的。真正从0到1创造出新事物的公司太少。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Visualize Git Projects with Ubigraph</title>
   <link href="suafeng/2014/04/18/visualize-git-proj.html"/>
   <updated>2014-04-18T00:00:00+08:00</updated>
   <id>suafeng/2014/04/18/visualize-git-proj</id>
   <content type="html">
&lt;p&gt;一个比较大的项目一般都由一群人协作开发，开发人员可能活动于各个模块之间。前两天突然想起如果把一个工程的所有commit数据提取出来，然后按时间顺序动态演示出来可能会比较好玩。从这个过程中我们可以看到一个项目是如何进化的，各个开发者到底在折腾哪些模块。比如这是一个多个开发者参与的一个项目展示图，其实是3D动态的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/gitshow.png&quot; alt=&quot;gitshow&quot; class=&quot;img-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我写了两个脚本来做这件事情，代码放在&lt;a href=&quot;https://github.com/chenyukang/VisualizeGitProj&quot;&gt;这里了&lt;/a&gt;。第一个脚本是Ruby写的gitstat.rb，用来提取git的commit数据，这些信息包括：提交者名字，日期，增加的行数，删减的行数，相关的模块。所有这些数据都按照提交的时间排序，然后输出到一个文本文件里。
使用方法是:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$.&lt;/span&gt;/gitstat.rb -l eventmachine,tinyrb -o log.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;-l后面是模块名字列表，如果不加-l脚本会自己检测出当前文件夹下所有的.git，每一个目录当做一个模块。log.txt的格式看起来像这个样子：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;Francis     2008-07-28T16:57:15+00:00   &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;   eventmachine
Francis     2008-07-28T17:03:46+00:00   &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;   eventmachine
Francis     2008-07-29T23:34:53+00:00   &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;   eventmachine
Macournoyer 2008-07-31T23:34:52+00:00   &lt;span class=&quot;m&quot;&gt;13&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;47&lt;/span&gt;  tinyrb
Macournoyer 2008-08-01T00:36:27+00:00   &lt;span class=&quot;m&quot;&gt;32&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;   tinyrb&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;另外一个脚本就是gitshow.py用来从文件中读取数据，然后发送给Ubigraph渲染。&lt;/p&gt;

&lt;p&gt;Ubigraph可以从官方网站上下载，解压后会看到一个example目录，里面有几种语言的示例。使用方式是：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$.&lt;/span&gt;/bin/ubigraph_server  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;在Ubigraph目录启动服务端&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$.&lt;/span&gt;/gitshow.py log.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这里开发者用圆球表示，模块用多边形球表示，并且颜色加以区分。另外加入了一点效果就是当开发者有提交的时候，其颜色闪红一下，同时开发者和模块之间加上一条虚线。并且开发者和模块的体积会随着代码改变量而增大，这样也能看出哪些模块工作量比较大(当然用行数来衡量工作量本身并没有多大参考价值，只是为了效果)。&lt;/p&gt;

&lt;p&gt;对于一个多人参与的项目也可以看出一些好玩的信息来，如果一个开发者贡献大其体积越大，而且离项目的节点越近，比如eventmachine的演示图如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/eventmachine.png&quot; alt=&quot;gitshow&quot; class=&quot;img-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;有一个类似的开源的C++项目叫做: &lt;a href=&quot;https://github.com/acaudwell/Gource&quot;&gt;Gource&lt;/a&gt;，效果做得很漂亮。&lt;/p&gt;
</content>
 </entry>
 

</feed>
